
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.JOptionPane;


public class CinemaTicketMachine extends javax.swing.JFrame {

    ArrayList<Movie> movieList;
    ArrayList<ShowTime> showTimeList;
    /**
     * Creates new form CinemaTicketMachine
     */
    public CinemaTicketMachine() {
        initComponents();
        cancelButton.setVisible(false);
        printReceiptButton.setVisible(false);
        movieList=new ArrayList<>();
        showTimeList=new ArrayList<>();
        try{
            BufferedReader reader=new BufferedReader(new FileReader("movie.txt"));
            String line="";
            while((line=reader.readLine())!=null){
                String[] token=line.split(",");
                movieList.add(new Movie(Integer.parseInt(token[0]),token[1],token[2],Double.parseDouble(token[3])));
            }
            reader.close();
            reader=new BufferedReader(new FileReader("show_time.txt"));
            while((line=reader.readLine())!=null){
                String[] token=line.split(",");
                showTimeList.add(new ShowTime(Integer.parseInt(token[0]),token[1],token[2],Integer.parseInt(token[3])));
            }
            reader.close();
        }
        catch(Exception ex){
            ex.printStackTrace();
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        listMoviesButton = new javax.swing.JButton();
        showTimesButton = new javax.swing.JButton();
        idTextField = new javax.swing.JTextField();
        purchaseTicket = new javax.swing.JButton();
        showReceiptButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailsTextArea = new javax.swing.JTextArea();
        printReceiptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        searchByGenreButton = new javax.swing.JButton();
        genreComboBox = new javax.swing.JComboBox<>();

        jButton5.setText("jButton5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cinema Ticket Machine");

        listMoviesButton.setText("List Movies");
        listMoviesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listMoviesButtonActionPerformed(evt);
            }
        });

        showTimesButton.setText("Show times");
        showTimesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTimesButtonActionPerformed(evt);
            }
        });

        purchaseTicket.setText("Purchase ticket");
        purchaseTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseTicketActionPerformed(evt);
            }
        });

        showReceiptButton.setText("Show receipt");
        showReceiptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showReceiptButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        detailsTextArea.setEditable(false);
        detailsTextArea.setColumns(20);
        detailsTextArea.setRows(5);
        jScrollPane1.setViewportView(detailsTextArea);

        printReceiptButton.setText("Print Receipt");
        printReceiptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printReceiptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        searchByGenreButton.setText("Search By Genre");
        searchByGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByGenreButtonActionPerformed(evt);
            }
        });

        genreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fantasy", "Family", "Comedy", "Adventures", "Science Fiction", "Action" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(printReceiptButton)
                .addGap(68, 68, 68)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(listMoviesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showTimesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(purchaseTicket)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showReceiptButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(exitButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(searchByGenreButton)
                                .addGap(23, 23, 23)
                                .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(127, 127, 127)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listMoviesButton)
                    .addComponent(showTimesButton)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseTicket)
                    .addComponent(showReceiptButton)
                    .addComponent(exitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genreComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByGenreButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printReceiptButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void listMoviesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listMoviesButtonActionPerformed
        cancelButton.setVisible(false);
        printReceiptButton.setVisible(false);
        detailsTextArea.setText(String.format("%-10s %-50s \t %s\n", "Id","Name","Genres"));
        detailsTextArea.append(String.format("%-8s %-30s \t %s\n", "==",
                "===========================",
                "================="));
        for(Movie movie:movieList){
            String id=Integer.toString(movie.getId());
            String title=movie.getTitle();
            String genre=movie.getGenre();
            detailsTextArea.append(String.format("%-10s %-50s \t %s\n", id,title,genre));            
        }
    }//GEN-LAST:event_listMoviesButtonActionPerformed

    private void showTimesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTimesButtonActionPerformed
        cancelButton.setVisible(false);
        printReceiptButton.setVisible(false);
        detailsTextArea.setText("");
        boolean found=false;
        if(!idTextField.getText().equals("")){
            try{
                int movieID=Integer.parseInt(idTextField.getText());
                detailsTextArea.setText(String.format("%-10s %-50s \t %-30s \t %s \n", "Movie Id","Date","Time Slot","Available Tickets"));
                detailsTextArea.append(String.format("%-8s %-30s \t %-30s \t %s \n", "======",
                    "===========================","=================","=========================="));    
                for(ShowTime showTime:showTimeList){ 
                    if(showTime.getMovieID()==movieID){
                        found=true;
                        detailsTextArea.append(String.format("%-15d %-50s \t %-30s \t %s \n", showTime.getMovieID(),showTime.getDate(),showTime.getTimeSlot(),showTime.getAvailableTicket()));                        
                    }
                }
                if(!found)
                    detailsTextArea.setText("No Show time exist for the selected movie");
            }catch(Exception ex){
                JOptionPane.showMessageDialog(rootPane, "Movie ID entered is not an integer", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Please enter the Movie ID", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_showTimesButtonActionPerformed

    private void purchaseTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseTicketActionPerformed
        new PurchaseTicket().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_purchaseTicketActionPerformed

    private void showReceiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showReceiptButtonActionPerformed
        cancelButton.setVisible(true);
        printReceiptButton.setVisible(true);
        try{
            BufferedReader reader=new BufferedReader(new FileReader("transaction.txt"));
            String data="", line;
            while((line=reader.readLine())!=null){
                data=line;
            }
            String[] token=data.split(",");
            if(token.length==6){
                detailsTextArea.setText("Movie ID: "+token[0]+"\n");
                for(Movie movie:movieList){
                    if(movie.getId()==Integer.parseInt(token[0])){
                        detailsTextArea.append("Movie Title: "+movie.getTitle()+"\n");
                        detailsTextArea.append("Genre: "+movie.getGenre()+"\n");
                        detailsTextArea.append("Ticket Price: "+movie.getPrice()+"\n");
                    }
                }
                detailsTextArea.append("Movie Date: "+token[1]+"\n");
                detailsTextArea.append("Movie Timeslot: "+token[2]+"\n");
                detailsTextArea.append("Ticket Type: "+token[3]+"\n");
                detailsTextArea.append("Number of Tickets: "+token[4]+"\n");
                detailsTextArea.append("Total fare: $"+token[5]+"\n");
                
            }
            else
                detailsTextArea.setText("No transaction is processed yet.");            
        }
        catch(FileNotFoundException err){
            detailsTextArea.setText("No transaction is processed yet.");            
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_showReceiptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        cancelButton.setVisible(false);
        printReceiptButton.setVisible(false);  
        detailsTextArea.setText("");
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void printReceiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printReceiptButtonActionPerformed
        try{
            BufferedWriter writer=new BufferedWriter(new FileWriter("receipt.txt"));
            writer.write(detailsTextArea.getText());
            writer.flush();
            writer.close();
            JOptionPane.showMessageDialog(rootPane, "Receipt is printed to file successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
            cancelButton.setVisible(false);
        printReceiptButton.setVisible(false);  
        detailsTextArea.setText("");
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_printReceiptButtonActionPerformed

    private void searchByGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByGenreButtonActionPerformed
        cancelButton.setVisible(false);
        printReceiptButton.setVisible(false);
        detailsTextArea.setText(String.format("%-10s %-50s \t %s\n", "Id","Name","Genres"));
        detailsTextArea.append(String.format("%-8s %-30s \t %s\n", "==",
                "===========================",
                "================="));
        for(Movie movie:movieList){
            String id=Integer.toString(movie.getId());
            String title=movie.getTitle();
            String[] genres=movie.getGenre().split("/");
            for(int i=0;i<genres.length;i++)
            {
                if(genres[i].equalsIgnoreCase(genreComboBox.getSelectedItem().toString()))
                    detailsTextArea.append(String.format("%-10s %-50s \t %s\n", id,title,movie.getGenre()));            
            }
        }
    }//GEN-LAST:event_searchByGenreButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CinemaTicketMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CinemaTicketMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CinemaTicketMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CinemaTicketMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CinemaTicketMachine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea detailsTextArea;
    private javax.swing.JButton exitButton;
    private javax.swing.JComboBox<String> genreComboBox;
    private javax.swing.JTextField idTextField;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listMoviesButton;
    private javax.swing.JButton printReceiptButton;
    private javax.swing.JButton purchaseTicket;
    private javax.swing.JButton searchByGenreButton;
    private javax.swing.JButton showReceiptButton;
    private javax.swing.JButton showTimesButton;
    // End of variables declaration//GEN-END:variables
}
